{
    "swagger": "2.0",
    "info": {
        "description": "This is a REST API application made with Express",
        "version": "1.0.0",
        "title": "Express API for Users and Forumposts",
        "contact": {
            "name": "The repo is found here:",
            "url": "https://github.com/sararazm/gruppsarbete-backend"
        }
    },
    "host": "localhost:3030",
    "basePath": "/api",
    "schemes": [
    "http"
  ],
    "consumes": [
    "application/json"
  ],
    "produces": [
    "application/json"
  ],
    "paths": {
      "/user": {
         "get": {
          "operationId": "users",
          "summary": "Get all users",
          "produces": [
          "application/json"
          ],
          "parameters": [

        ],
          "responses": {
            "200": {
              "description": "successfully fetched all users",
                "schema": {
                  
                  "type": "array",
                  "items": {
                        
                    "$ref": "#/definitions/user"
                                    
                  }              
                } 
              },
          "400": {
          "description": "Invalid ID",
            "schema": {
              "$ref": "#/definitions/errorModel"
            }
          }
        }  
     },
     "post": {
        "operationId": "newUser",
        "summary": "Add new user",
        "produces": [
          "application/json"
          ],
        "parameters": [
          {
            "name": "user",
            "in": "body",
            "description": "New user to add",
            "required": true,
            "schema": {
              "$ref": "#/definitions/newUser"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "user response",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/user"
              }
            }
          },
          "404": {
          "description": "user not found",
            "schema": {
              "$ref": "#/definitions/errorModel"
            }
           }
        }
      } 
  },
    "/user/{id}": {
      "get": {
        "summary": "Find user by ID",
        "operationId": "findUserById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of user to get",
            "required": true,
            "type": "string",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "user response",
            "schema": {
              "$ref": "#/definitions/user"
            }
          },
          "400": {
          "description": "Invalid ID",
            "schema": {
              "$ref": "#/definitions/errorModel"
            }
           },
          "404": {
          "description": "user not found",
            "schema": {
              "$ref": "#/definitions/errorModel"
            }
           }
        }
      },
      "delete": {
        "summary": "Delete User by ID",
        "operationId": "deleteUser",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of user to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "user deleted"
          },
          "400": {
          "description": "Invalid ID",
            "schema": {
              "$ref": "#/definitions/errorModel"
            }
           },
          "404": {
          "description": "user not found",
            "schema": {
              "$ref": "#/definitions/errorModel"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "user": {
      "type": "object",
      "allOf": [
        {
          "required": [
            "id"
          ],
          "properties": {
            "id": {
              "type": "string"
            }
          }
        },
        {
          "$ref": "#/definitions/newUser"
        }        
      ]
    },
    "newUser": {
      "type": "object",
      "required": [
        "email"
      ],
      "properties": {
        "id": {
          "type": "string"
        },
        "email": {
          "type": "string",
          "example": "user@mail.se"
        },
        "password": {
          "type": "string"
        }
      }
    },
    "errorModel": {
      "type": "object",
      "required": [
        "code",
        "message"
      ],
      "properties": {
        "code": {
          "type": "string"
        },
        "message": {
          "type": "string"
    }
   }
  }
 }
}